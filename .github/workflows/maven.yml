# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Images
      run: |
        docker build -t mydockerhubusername/front-service:${{ github.sha }} ./front-service/
        docker push mydockerhubusername/front-service:${{ github.sha }}

    - name: Deploy to Cloud Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_IP }}
        username: ${{ secrets.SSH_ID }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd projects
          curl -O https://github.com/nhnacademy-aiot1-5/docker-compose.git
          cd docker-compose
          docker-compose down
          docker-compose up -d

    # - name: Set up JDK 11
    #   uses: actions/setup-java@v3
    #   with:
    #     java-version: '11'
    #     distribution: 'temurin'
    #     cache: maven
    # - name: Build with Maven
    #   run: mvn -B package --file pom.xml

    # - name : Run SonarQube
    #   run : mvn sonar:sonar -Dsonar.projectKey=github-action -Dsonar.host.url=${{secrets.SONAR_HOST}} -Dsonar.login=${{secrets.SONAR_TOKEN}}

    # - name: upload file
    #   uses: appleboy/scp-action@master
    #   with:
    #     host: ${{ secrets.SSH_IP }}
    #     username: ${{ secrets.SSH_ID }}
    #     key: ${{ secrets.SSH_KEY }}
    #     port: ${{ secrets.SSH_PORT }}
    #     source: "target/*.jar"
    #     target: "~/"
    #     rm: false

    # - name: execute shell script
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SSH_IP }}
    #     username: ${{ secrets.SSH_ID }}
    #     key: ${{ secrets.SSH_KEY }}
    #     port: ${{ secrets.SSH_PORT }}
    #     script_stop: true
    #     script: "./startup.sh"
